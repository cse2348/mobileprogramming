코틀린
- oss로 젯브레인에서 개발한 프로그래밍언어
- JVM에서 실행되는 자바 바이트 코드를 생성하므로 자바와 완벽하게 호환되는 크로스 플랫폼을 지원
→ 자바 어플리케이션이 실행가능한 환경이면 코틀린 어플리케이션도 실행가능

- 5가지 어플리케이션 작성가능
- 네이티브 어플리케이션
-웹브라우저에서 실행되는 자바 스크립트
-서버에서 실행되는  http서블릿
-구글 안드로이트 어플리케이션
- 자바처럼 정적 타입의 언어

-  모든 표현식의 타입은 컴파일 시점에 알수있음 → 타입추론가능
- 자바와 동일하게 객체지향 프로그래밍을 지원함
- 함수형 프로그래밍을 지원함(클래스와 별도로 함수를 선언가능)
- 문법과 코드가 간결 →명령문 끝에 세미콜론(;)을 붙이지 않아도됌

- 코틀린에서는 모든것이 객체
 → 멤버 함수나 프로퍼티를 호출할수 있음

- 기본타입
   -numbers : Byte,short,int,long,loat,double(언더스코어_사용가능)
   -character : char(자바에서는 char에 숫자가능했는데 코틀린에서는 불가능)
   -boolean: boolean
   -Array
   -String

- 작은타입은 큰타입의 하위타입이 아님. 모든 타입이 클래스이므로 명시적으로 형변환해줘야함
→타입변환 함수 호출해야함.
- 산술연산에서는 묵시적 변환이 이루어짐

변수 및 상수
- 클래스의 멤버변수 및 전역변수는 반드시 선언시 초기화 해야함(모든 변수는 null허용안함)
- 지역변수의 경우 ,선언후 사용가능 →단 초기화되어있지 않으면 사용시 에러 발생
- 변수(mutable variable)
var variable:Type = value
앞에 val가 붙으면 변경불가(자바의 fianl )같은 느낌

- .trimIndent() → 빈칸 없이 출력됨
- .trimMargin(”>”)→ > 까지 공백삭제
- null을 허용하려면 물음표를 추가해야함
- Lateinit : 변수에만 사용가능하고, 선언하고 나중에 초기화가능(null값으로 초기화불가,초기화전에는 사용불가,기본데이터타입에는 사용불가)

- Lazy → val에 사용하여 늦은 초기화
- 초기화 블록에 초기화에 필요한 코드 작성(처음 호출시 초기화 블록의코드가 실행, 마지막줄에는 초기화할 값을 명시)
 - var str:String by lazy{} ←형태로 사용

- 엘비스(elvis)연산자 (?:) →null이 아닌 기본 값을 반환하고 싶을때 사용
- 데이터 타입: 배열
→ Array<String> 과 같이 제너릭 타입으로 나타냄, 배열은 크기를 변경할수 없음
→ 빈배열 생성시 / val arr=srrayofNulls<Int>(10)

- 연산자
   -  내부적으로 연산자 오버로딩한 함수를 사용해서 연산을 처리 
   - byte과 boolean은 안됌
   - 단항연산자/복합대행연산자 가능
   - 비트연산자 → 오버로딩하고 있지 않음
   - 논리연산자 (&&,||,!)
   -인덱스 연산자 → invoke연산자 : 객체를 통한 함수 호출
   - 타입확인 연산자: is , !is

입출력
- 출력 (print,println)→자바와 동일
- 출력 문자열 내에 $는 변수값
- 입력:string → readline함수 / 다른 타입은 형변환해야함
ex) readLine()!!.toInt()

- 난수발생
- random사용

제어문
- if문
   → 조건에 따라 여러 표현식을 실행해야하는경우, 블록의 마지막 값이 실행됌
- when구문
    → switch구문에 대응하는 구문(→사용해서 사용,break필요없음/표현식으로도 사용가능)
- for문
    →foreach구문과 비슷함
- break문
 → 중첩되어잇으면 가장 최근의 제어문 벗어남
 → label break는 @사용하기(공백없이 사용)
- continue
 →가장 가까운 제어문으로 옮김
→labeled Continue 

함수
- fun 함수 (인자1:자료형1, 인수2:자료형2, …):반환자료형 {}
     - 인자생략가능,반환값이 없는경우 unit및 생략가능

- 간단한 값을 반환하는경우 {} 생략가능
- 디폴트 매개변수
    - 매개변수의 값을 입력하지 않으면 디폴트 값을 가지게 됌
  -  매개변수의 이름을 사용하면 매개변수의 위치에 상관없이 사용가능

infix 함수
    - 함수의 중위적 표현 가능
(p createPyramid 4 , p.cratePyramid(4))

 재귀함수
 - 무한 루프에 빠지지 않도록 주의해서 사용 →출구마련해놔야함

- 꼬리 재귀함수(Tail Recursive Funtion)
→ 기존의 재귀함수는 모든 재귀 호출이 완료될때까지는 결과를 얻을수 없었으나 꼬리재귀에서는 계산이 먼저 수행되고 재귀 호출이 수행되는 구조 (stackoverflow가 발생하지 않도록 효율적인 순환기반의 버전으로 최적화 - 마지막으로 수행하는 구문이 자신을 호출하는 구문)
    
람다 함수
- 반환 자료형 생략과 블록과 리턴문 생략가능 (익명 함수를 간겨랗게 표현할수있는 방법) 
- 형식 :  {매개변수 →함수내용 }
항상 {}로 감싸서 표현
인수목록을 나열하고 →이후에 본문위치
인자는()로 감싸지않음
인자는 형식 추론이 가능 하므로 타입생략가능
함수 반환값은 함수 내용의 마지막 표현식
변수에 람다식을 저장하고 변수를 일반 함수처럼 사용 (변수에 대입하지 않으면 이후에 람다함수사용불가)
ex) printIn({x:int,y:int →x+y}(10,20))

- SAM(single abstract method)변환
      - 추상 메서드 하나를 인수로 사용할때만 대신 함수 인수전달

- function tyoe
  - 함수타입의 변수선언→ 함수 타입변수에서는 리턴을 쓰지않고 마지막줄이 반환됨

- high - order function
   - 함수의 인수로 함수나 람다식을 받거나 반환할수 있는 함수

클래스
- class person{}
- 객체선언 →new키워드는 사용하지 않음 val person = Person()
- 클래스 생성자
   - primary생성자 - 매개변수들이 멤버변수로 자동 추가
    -secondary 생성자 -매개변수들이 멤버변수로 추가되지 않음(반드시 primary생성자를 호출해야함_
      → 생성자 오버로딩의 개념으로 여러개의 생성자 정의시 사용
- 모든 기본 클래스는 상속이 불가능
        → 클래스 상속을 하려면 open키워드를 추가해야함 (open class 클래스이름{})

중첩클래스
- 클래스 내에 선언된 정적인 클래스
- -자바의 중첩 정의된 정적 멤버클래스의 개념과 동일
- outerclass의 일반 멤버변수 및 함수 접근 불가

내부(inner)클래스
- 자바의 인스턴스 멤버 클래스 개념과 동일
- outcalss의 객체를 생성해야만 사용할수있는 중첩 클래스
- outerclass의 멤버 액세스 가능(outclass객체 생성 필요)
- 반환값 (this@Outerclass) → 레퍼런스가 반환되게 됨

접근제한자
- public- 전체공개, 생략하면 기본이 public(자바의 디폴트_
- private -  현재파일 내에서만 사용가능
- protected - 해당 파일 내부에서만 사용가능
- internal -같은 모듈내에서만 사용가능

인터페이스
- 자바의 인터페이스와 동일한 기능 수행(변수도 선언만 가능하며 다중상속 가능)

추상클래스
- 인스턴스화 할수없는 클래스
- 추상 메소드는 상속을 통해 오버라이딩해 주어야함
- open키워드 생략

companion Object
- 자바에서의 ststic변수 및 메소드 기능이 필요한 경우 사용 →객체생성안하고 이름으로만도 사용가능

Object클래스
- singleton패턴의 객체정의
- 하나의 instance를 가지는 클래스 선언
- 익명의 객체를 선언시에도 사용(인터페이스를 구현한 객체 생성시 사용)

Data클래스
- 데이터를 저장하는 구조의 클래스

Enum(열거체) 클래스
- 열거체의 기능을 수행하는 클래스
- 클래스안에 프로퍼티나 메소드 정의간으 (프로퍼티와 메소드 사이에 ; 작성)

Sealed 클래스
- subclass의 생성가능성을 제한
- when 표현식에서 모든 sealed 크랠스의 서브 클래스를 처리(else문 필요없음 , else 오류발생함)
- 자동 open 클래스
- 나도 모르게 생성되는 서브클래스 차단
- sealed클래스는 추상 클래스
- sealed 클래스의 모든 서브 클래스는 sealed class은 같은 파일에 선언되어야함

<컬렉션> 
List
- 같은 자료형의 데이터들을 순서대로 가짐
- 중복 아이템을 가질수 있고,추가,삭제,수정이 용이
- 리스트 생성
    → 읽기 전용 리스트: listof()메서드 사용 / 변경가능한 리스트 생성: mutableListof()메서드 사용

Map
- 키와 값의 싸으로 이루어진 자료구조(키 값은 중복될수없는 자료구조)
- 읽기전용 맵:  mapOf()   /  변경가능한 맵:mutableMapof()

Set
- 집합 - 중복되지 않은 요소들로 구성된 자료구조
- 읽기전용 집합 :setOf   /  변경 가능한 집합:  mutableSetOf()

- 사용자 인터페이스(UI)
앱의 사용자 인터페이스(UI)는 화면에 표시되는 텍스트, 이미지, 버튼, 기타 여러 유형의 요소 및 화면에 표시되는 방식입니다.
즉, 앱이 콘텐츠를 사용자에게 표시하는 방식이자 사용자가 앱과 상호작용하는 방식
이 이미지에는 클릭 가능한 버튼, 텍스트 메시지, 사용자가 데이터를 입력할 수 있는 텍스트 입력란이 포함
앱 화면에 표시되는 대부분의 내용은 UI 요소(UI 구성요소라고도 함)입니다. UI 요소는 상호작용이 가능한 요소(예: 클릭 가능한 버튼이나 편집 가능한 입력란)가 될 수도 있고 장식용 이미지가 될 수도 있음

- Jetpack Compose
Android UI를 빌드하기 위해 사용하는 최신 툴킷
Compose는 적은 양의 코드, 강력한 도구 및 직관적인 Kotlin 기능으로 Android에서 UI 개발을 간소화하고 가속합니다. Compose를 사용하면 데이터를 받아서 UI 요소를 설명하는 함수, 즉 구성 가능한 함수라는 함수 집합을 정의하여 UI를 빌드할 수 있음

- 구성 가능한 함수
구성 가능한 함수는 Compose에서 UI의 기본 빌드 블록입니다. 구성 가능한 함수의 특징
UI 일부를 설명합니다. (구성 가능한 함수를 만들려면 함수 이름에 @Composable 주석을 추가하기만 하면 됌)
아무것도 반환하지 않습니다.
몇 개의 입력을 받아서 화면에 표시되는 내용을 생성합니다.
구성 가능한 함수는 @Composable 주석으로 주석 처리됩니다. 모든 구성 가능한 함수에는 이 주석이 있어야 합니다. 이 주석을 통해 이 함수가 데이터를 UI로 변환하게 되어 있다는 것을 Compose 컴파일러에 알림

- Compose 함수 이름의 특징
명사여야 함: DoneButton()
동사 또는 동사구이면 안 됨: DrawTextField()
명사화된 전치사이면 안 됨: TextFieldWithLink()
형용사이면 안 됨: Bright()
부사이면 안 됨: Outside()
명사 앞에는 명사를 설명하는 형용사를 붙일 수도 있음: RoundIcon()

- 주석
주석은 주석 처리하고 있는 선언의 시작 부분에 @ 문자를 이름(주석)의 접두사로 추가하여 적용

- 매개변수가 있는 주석
주석은 매개변수를 받을 수 있습니다. 매개변수는 주석을 처리하는 도구에 추가 정보를 제공

텍스트를 입력하고 수정하는 TextField 컴포저블
텍스트를 표시하는 Text 컴포저블
UI 요소 사이에 빈 공간을 표시하는 Spacer 컴포저블

컴포지션
- Compose는 선언형 UI 프레임워크로, UI의 모습을 코드로 선언
1. Compose 앱은 구성 가능한 함수를 호출하여 데이터를 UI로 변환
2. 상태가 변경되면 Compose는 영향을 받는 구성 가능한 함수를 새 상태로 다시 실행
3. 리컴포지션이라는 업데이트된 UI가 만들어집니다. Compose는 자동으로 리컴포지션을 예약

스테이트풀과 스테이트리스 컴포저틀 비교
-상태 호이스팅
->상태를 여러 구성 가능한 함수와 공유하는 경우
->앱에서 재사용할 수 있는 스테이트리스(Stateless) 컴포저블을 만드는 경우

스테이트리스(Stateless) 함수
- 구성 가능한 함수에서 상태를 추출할 때 결과로 생성되는 구성 가능한 함수
- 스테이트리스(Stateless) 컴포저블은 상태가 없는 컴포저블입니다. 즉, 새 상태를 보유하거나 정의하거나 수정하지 않음
- 스테이트풀(Stateful) 컴포저블은 시간이 지남에 따라 변할 수 있는 상태를 소유하는 컴포저블

자동 테스트 유형
로컬 테스트
- 소수의 코드를 직접 테스트하여 제대로 작동하는지 확인하는 자동 테스트의 유형
로컬 테스트를 사용하여 함수, 클래스, 속성을 테스트할 수 있음
로컬 테스트는 워크스테이션에서 실행됩니다. 즉, 기기나 에뮬레이터 없이도 개발 환경에서 실행
Android 스튜디오에서는 로컬 테스트를 자동으로 실행할 수 있습니다.

계측 테스트
Android 개발의 경우 계측 테스트는 UI 테스트
계측 테스트를 사용하면 Android API와 플랫폼 API 및 서비스에 종속된 앱 일부를 테스트할 수 있습니다.
로컬 테스트와 달리 UI 테스트는 앱이나 앱의 일부를 실행하고 사용자 상호작용을 시뮬레이션하여 앱이 적절하게 반응했는지 확인합니다. 이 과정 전반에 걸쳐 UI 테스트는 실제 기기 또는 에뮬레이터에서 실행
Android에서 계측 테스트를 실행하면 테스트 코드는 실제로 일반 Android 앱처럼 자체 Android 애플리케이션 패키지(APK)로 빌드됩니다. APK는 기기나 에뮬레이터에서 앱을 실행하는 데 필요한 파일과 모든 코드가 포함된 압축 파일입니다. 이 테스트 APK는 일반 앱 APK와 함께 기기 또는 에뮬레이터에 설치됩니다. 그런 다음 테스트 APK는 앱 APK를 위한 테스트를 실행
